// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	lib "github.com/huynhtruongson/simple-todo/lib"
	mock "github.com/stretchr/testify/mock"

	user_entity "github.com/huynhtruongson/simple-todo/services/user/entity"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, db, user
func (_m *UserRepo) CreateUser(ctx context.Context, db lib.QueryExecer, user user_entity.User) (int, error) {
	ret := _m.Called(ctx, db, user)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, user_entity.User) (int, error)); ok {
		return rf(ctx, db, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, user_entity.User) int); ok {
		r0 = rf(ctx, db, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.QueryExecer, user_entity.User) error); ok {
		r1 = rf(ctx, db, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - user user_entity.User
func (_e *UserRepo_Expecter) CreateUser(ctx interface{}, db interface{}, user interface{}) *UserRepo_CreateUser_Call {
	return &UserRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, db, user)}
}

func (_c *UserRepo_CreateUser_Call) Run(run func(ctx context.Context, db lib.QueryExecer, user user_entity.User)) *UserRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].(user_entity.User))
	})
	return _c
}

func (_c *UserRepo_CreateUser_Call) Return(_a0 int, _a1 error) *UserRepo_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_CreateUser_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, user_entity.User) (int, error)) *UserRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByEmail provides a mock function with given fields: ctx, db, email
func (_m *UserRepo) GetUsersByEmail(ctx context.Context, db lib.QueryExecer, email string) ([]user_entity.User, error) {
	ret := _m.Called(ctx, db, email)

	var r0 []user_entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, string) ([]user_entity.User, error)); ok {
		return rf(ctx, db, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, string) []user_entity.User); ok {
		r0 = rf(ctx, db, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUsersByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByEmail'
type UserRepo_GetUsersByEmail_Call struct {
	*mock.Call
}

// GetUsersByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - email string
func (_e *UserRepo_Expecter) GetUsersByEmail(ctx interface{}, db interface{}, email interface{}) *UserRepo_GetUsersByEmail_Call {
	return &UserRepo_GetUsersByEmail_Call{Call: _e.mock.On("GetUsersByEmail", ctx, db, email)}
}

func (_c *UserRepo_GetUsersByEmail_Call) Run(run func(ctx context.Context, db lib.QueryExecer, email string)) *UserRepo_GetUsersByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *UserRepo_GetUsersByEmail_Call) Return(_a0 []user_entity.User, _a1 error) *UserRepo_GetUsersByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUsersByEmail_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, string) ([]user_entity.User, error)) *UserRepo_GetUsersByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByUsername provides a mock function with given fields: ctx, db, username
func (_m *UserRepo) GetUsersByUsername(ctx context.Context, db lib.QueryExecer, username string) ([]user_entity.User, error) {
	ret := _m.Called(ctx, db, username)

	var r0 []user_entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, string) ([]user_entity.User, error)); ok {
		return rf(ctx, db, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, string) []user_entity.User); ok {
		r0 = rf(ctx, db, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUsersByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByUsername'
type UserRepo_GetUsersByUsername_Call struct {
	*mock.Call
}

// GetUsersByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - username string
func (_e *UserRepo_Expecter) GetUsersByUsername(ctx interface{}, db interface{}, username interface{}) *UserRepo_GetUsersByUsername_Call {
	return &UserRepo_GetUsersByUsername_Call{Call: _e.mock.On("GetUsersByUsername", ctx, db, username)}
}

func (_c *UserRepo_GetUsersByUsername_Call) Run(run func(ctx context.Context, db lib.QueryExecer, username string)) *UserRepo_GetUsersByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *UserRepo_GetUsersByUsername_Call) Return(_a0 []user_entity.User, _a1 error) *UserRepo_GetUsersByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUsersByUsername_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, string) ([]user_entity.User, error)) *UserRepo_GetUsersByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
