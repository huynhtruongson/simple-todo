// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	asynq "github.com/hibiken/asynq"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/huynhtruongson/simple-todo/worker"
)

// WorkerClient is an autogenerated mock type for the WorkerClient type
type WorkerClient struct {
	mock.Mock
}

type WorkerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkerClient) EXPECT() *WorkerClient_Expecter {
	return &WorkerClient_Expecter{mock: &_m.Mock}
}

// DistributeTaskSendVerifyEmail provides a mock function with given fields: ctx, payload, opts
func (_m *WorkerClient) DistributeTaskSendVerifyEmail(ctx context.Context, payload *worker.TaskSendVerifyEmailPayload, opts ...asynq.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *worker.TaskSendVerifyEmailPayload, ...asynq.Option) error); ok {
		r0 = rf(ctx, payload, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerClient_DistributeTaskSendVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributeTaskSendVerifyEmail'
type WorkerClient_DistributeTaskSendVerifyEmail_Call struct {
	*mock.Call
}

// DistributeTaskSendVerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - payload *worker.TaskSendVerifyEmailPayload
//   - opts ...asynq.Option
func (_e *WorkerClient_Expecter) DistributeTaskSendVerifyEmail(ctx interface{}, payload interface{}, opts ...interface{}) *WorkerClient_DistributeTaskSendVerifyEmail_Call {
	return &WorkerClient_DistributeTaskSendVerifyEmail_Call{Call: _e.mock.On("DistributeTaskSendVerifyEmail",
		append([]interface{}{ctx, payload}, opts...)...)}
}

func (_c *WorkerClient_DistributeTaskSendVerifyEmail_Call) Run(run func(ctx context.Context, payload *worker.TaskSendVerifyEmailPayload, opts ...asynq.Option)) *WorkerClient_DistributeTaskSendVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]asynq.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(asynq.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*worker.TaskSendVerifyEmailPayload), variadicArgs...)
	})
	return _c
}

func (_c *WorkerClient_DistributeTaskSendVerifyEmail_Call) Return(_a0 error) *WorkerClient_DistributeTaskSendVerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerClient_DistributeTaskSendVerifyEmail_Call) RunAndReturn(run func(context.Context, *worker.TaskSendVerifyEmailPayload, ...asynq.Option) error) *WorkerClient_DistributeTaskSendVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkerClient creates a new instance of WorkerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerClient {
	mock := &WorkerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
