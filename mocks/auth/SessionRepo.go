// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_entity "github.com/huynhtruongson/simple-todo/services/auth/entity"

	lib "github.com/huynhtruongson/simple-todo/lib"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionRepo is an autogenerated mock type for the SessionRepo type
type SessionRepo struct {
	mock.Mock
}

type SessionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepo) EXPECT() *SessionRepo_Expecter {
	return &SessionRepo_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, db, session
func (_m *SessionRepo) CreateSession(ctx context.Context, db lib.QueryExecer, session auth_entity.Session) error {
	ret := _m.Called(ctx, db, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, auth_entity.Session) error); ok {
		r0 = rf(ctx, db, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepo_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionRepo_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - session auth_entity.Session
func (_e *SessionRepo_Expecter) CreateSession(ctx interface{}, db interface{}, session interface{}) *SessionRepo_CreateSession_Call {
	return &SessionRepo_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, db, session)}
}

func (_c *SessionRepo_CreateSession_Call) Run(run func(ctx context.Context, db lib.QueryExecer, session auth_entity.Session)) *SessionRepo_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].(auth_entity.Session))
	})
	return _c
}

func (_c *SessionRepo_CreateSession_Call) Return(_a0 error) *SessionRepo_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepo_CreateSession_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, auth_entity.Session) error) *SessionRepo_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByIds provides a mock function with given fields: ctx, db, ids
func (_m *SessionRepo) GetSessionByIds(ctx context.Context, db lib.QueryExecer, ids uuid.UUIDs) ([]auth_entity.Session, error) {
	ret := _m.Called(ctx, db, ids)

	var r0 []auth_entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, uuid.UUIDs) ([]auth_entity.Session, error)); ok {
		return rf(ctx, db, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, uuid.UUIDs) []auth_entity.Session); ok {
		r0 = rf(ctx, db, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]auth_entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.QueryExecer, uuid.UUIDs) error); ok {
		r1 = rf(ctx, db, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepo_GetSessionByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByIds'
type SessionRepo_GetSessionByIds_Call struct {
	*mock.Call
}

// GetSessionByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - ids uuid.UUIDs
func (_e *SessionRepo_Expecter) GetSessionByIds(ctx interface{}, db interface{}, ids interface{}) *SessionRepo_GetSessionByIds_Call {
	return &SessionRepo_GetSessionByIds_Call{Call: _e.mock.On("GetSessionByIds", ctx, db, ids)}
}

func (_c *SessionRepo_GetSessionByIds_Call) Run(run func(ctx context.Context, db lib.QueryExecer, ids uuid.UUIDs)) *SessionRepo_GetSessionByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].(uuid.UUIDs))
	})
	return _c
}

func (_c *SessionRepo_GetSessionByIds_Call) Return(_a0 []auth_entity.Session, _a1 error) *SessionRepo_GetSessionByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepo_GetSessionByIds_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, uuid.UUIDs) ([]auth_entity.Session, error)) *SessionRepo_GetSessionByIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepo creates a new instance of SessionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepo {
	mock := &SessionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
