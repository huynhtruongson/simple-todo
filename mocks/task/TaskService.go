// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/huynhtruongson/simple-todo/common"

	mock "github.com/stretchr/testify/mock"

	task_entity "github.com/huynhtruongson/simple-todo/services/task/entity"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

type TaskService_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskService) EXPECT() *TaskService_Expecter {
	return &TaskService_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskService) CreateTask(ctx context.Context, task task_entity.Task) (int, error) {
	ret := _m.Called(ctx, task)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, task_entity.Task) (int, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, task_entity.Task) int); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, task_entity.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task task_entity.Task
func (_e *TaskService_Expecter) CreateTask(ctx interface{}, task interface{}) *TaskService_CreateTask_Call {
	return &TaskService_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, task)}
}

func (_c *TaskService_CreateTask_Call) Run(run func(ctx context.Context, task task_entity.Task)) *TaskService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task_entity.Task))
	})
	return _c
}

func (_c *TaskService_CreateTask_Call) Return(_a0 int, _a1 error) *TaskService_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskService_CreateTask_Call) RunAndReturn(run func(context.Context, task_entity.Task) (int, error)) *TaskService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskService) DeleteTask(ctx context.Context, userID int, taskID int) error {
	ret := _m.Called(ctx, userID, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskService_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type TaskService_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - taskID int
func (_e *TaskService_Expecter) DeleteTask(ctx interface{}, userID interface{}, taskID interface{}) *TaskService_DeleteTask_Call {
	return &TaskService_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, userID, taskID)}
}

func (_c *TaskService_DeleteTask_Call) Run(run func(ctx context.Context, userID int, taskID int)) *TaskService_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *TaskService_DeleteTask_Call) Return(_a0 error) *TaskService_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskService_DeleteTask_Call) RunAndReturn(run func(context.Context, int, int) error) *TaskService_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListTask provides a mock function with given fields: ctx, paging, filter
func (_m *TaskService) ListTask(ctx context.Context, paging common.Paging, filter common.Filter) (task_entity.TasksWithPaging, error) {
	ret := _m.Called(ctx, paging, filter)

	var r0 task_entity.TasksWithPaging
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Paging, common.Filter) (task_entity.TasksWithPaging, error)); ok {
		return rf(ctx, paging, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Paging, common.Filter) task_entity.TasksWithPaging); ok {
		r0 = rf(ctx, paging, filter)
	} else {
		r0 = ret.Get(0).(task_entity.TasksWithPaging)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Paging, common.Filter) error); ok {
		r1 = rf(ctx, paging, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskService_ListTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTask'
type TaskService_ListTask_Call struct {
	*mock.Call
}

// ListTask is a helper method to define mock.On call
//   - ctx context.Context
//   - paging common.Paging
//   - filter common.Filter
func (_e *TaskService_Expecter) ListTask(ctx interface{}, paging interface{}, filter interface{}) *TaskService_ListTask_Call {
	return &TaskService_ListTask_Call{Call: _e.mock.On("ListTask", ctx, paging, filter)}
}

func (_c *TaskService_ListTask_Call) Run(run func(ctx context.Context, paging common.Paging, filter common.Filter)) *TaskService_ListTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Paging), args[2].(common.Filter))
	})
	return _c
}

func (_c *TaskService_ListTask_Call) Return(_a0 task_entity.TasksWithPaging, _a1 error) *TaskService_ListTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskService_ListTask_Call) RunAndReturn(run func(context.Context, common.Paging, common.Filter) (task_entity.TasksWithPaging, error)) *TaskService_ListTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *TaskService) UpdateTask(ctx context.Context, task task_entity.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, task_entity.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskService_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type TaskService_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task task_entity.Task
func (_e *TaskService_Expecter) UpdateTask(ctx interface{}, task interface{}) *TaskService_UpdateTask_Call {
	return &TaskService_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, task)}
}

func (_c *TaskService_UpdateTask_Call) Run(run func(ctx context.Context, task task_entity.Task)) *TaskService_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(task_entity.Task))
	})
	return _c
}

func (_c *TaskService_UpdateTask_Call) Return(_a0 error) *TaskService_UpdateTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskService_UpdateTask_Call) RunAndReturn(run func(context.Context, task_entity.Task) error) *TaskService_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskService creates a new instance of TaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskService {
	mock := &TaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
