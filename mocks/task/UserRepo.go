// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	lib "github.com/huynhtruongson/simple-todo/lib"
	mock "github.com/stretchr/testify/mock"

	user_entity "github.com/huynhtruongson/simple-todo/services/user/entity"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// GetUsersByUserIds provides a mock function with given fields: ctx, db, ids
func (_m *UserRepo) GetUsersByUserIds(ctx context.Context, db lib.QueryExecer, ids []int) ([]user_entity.User, error) {
	ret := _m.Called(ctx, db, ids)

	var r0 []user_entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, []int) ([]user_entity.User, error)); ok {
		return rf(ctx, db, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.QueryExecer, []int) []user_entity.User); ok {
		r0 = rf(ctx, db, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.QueryExecer, []int) error); ok {
		r1 = rf(ctx, db, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUsersByUserIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByUserIds'
type UserRepo_GetUsersByUserIds_Call struct {
	*mock.Call
}

// GetUsersByUserIds is a helper method to define mock.On call
//   - ctx context.Context
//   - db lib.QueryExecer
//   - ids []int
func (_e *UserRepo_Expecter) GetUsersByUserIds(ctx interface{}, db interface{}, ids interface{}) *UserRepo_GetUsersByUserIds_Call {
	return &UserRepo_GetUsersByUserIds_Call{Call: _e.mock.On("GetUsersByUserIds", ctx, db, ids)}
}

func (_c *UserRepo_GetUsersByUserIds_Call) Run(run func(ctx context.Context, db lib.QueryExecer, ids []int)) *UserRepo_GetUsersByUserIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.QueryExecer), args[2].([]int))
	})
	return _c
}

func (_c *UserRepo_GetUsersByUserIds_Call) Return(_a0 []user_entity.User, _a1 error) *UserRepo_GetUsersByUserIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUsersByUserIds_Call) RunAndReturn(run func(context.Context, lib.QueryExecer, []int) ([]user_entity.User, error)) *UserRepo_GetUsersByUserIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
